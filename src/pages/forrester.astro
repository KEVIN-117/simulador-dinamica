<!doctype html>
<html lang='en'>
  <head>
    <link rel='stylesheet' href='/assets/css/style.css' />
    <!-- Copyright 1998-2025 by Northwoods Software Corporation. -->
    <style>
      .menu-container {
        color: white;
        text-align: center;
      }

      .menu-title {
        font-size: 1.5rem;
      }

      .menu-section {
        display: flex;
        justify-content: center;
        gap: 0.5rem;
        align-items: flex-start;
      }

      .menu-group {
        background: #f4f4f4;
        border-radius: 6px;
        min-width: 160px;
      }

      .menu-group h4 {
        margin: 0;
        font-size: 0.95rem;
        color: #333;
        margin-bottom: 0.3rem;
      }

      .menu-group button {
        padding: 0.4rem 0.7rem;
        border: none;
        border-radius: 4px;
        background-color: #007bff;
        color: white;
        font-size: 0.85rem;
        cursor: pointer;
        transition: background-color 0.2s ease;
      }

      .menu-group button:hover {
        background-color: #0056b3;
      }

      .menu-group button.selected {
        background-color: #00d9ff;
        color: black;
        font-weight: bold;
      }
    </style>
    <title>
      System Dynamics Diagram Editor: Storage, Flows, Control Factors | GoJS
      Diagramming Library
    </title>
  </head>

  <body>
    <div class='flex flex-col prose'>
      <div class='w-full max-w-screen-xl mx-auto'>
        <!-- * * * * * * * * * * * * * -->
        <!-- Start of GoJS sample code -->
        <script src='/release/go.js' is:inline></script>
        <div id='allSampleContent' class='p-4 w-full'>
          <script src='/assets/extensions/Figures.js' is:inline></script>
          <script src='/assets/extensions/NodeLabelDraggingTool.js' is:inline
          ></script>
          <script id='code'>
            // SD is a global variable, to avoid polluting global namespace and to make the global
            // nature of the individual variables obvious.
            var SD = {
              mode: 'pointer', // Set to default mode.  Alternatives are "node" and "link", for
              // adding a new node or a new link respectively.
              itemType: 'pointer', // Set when user clicks on a node or link button.
              nodeCounter: { stock: 0, cloud: 0, variable: 0, valve: 0 },
            };
            var myDiagram; // Declared as global

            function init() {
              myDiagram = new go.Diagram('myDiagramDiv', {
                'undoManager.isEnabled': true,
                allowLink: false, // linking is only started via buttons, not modelessly
                'animationManager.isEnabled': false,

                'linkingTool.portGravity': 0, // no snapping while drawing new links
                'linkingTool.doActivate': function () {
                  // an override must be function, not using an arrow
                  // change the curve of the LinkingTool.temporaryLink
                  this.temporaryLink.curve =
                    SD.itemType === 'flow' ? go.Curve.None : go.Curve.Bezier;
                  this.temporaryLink.path.stroke =
                    SD.itemType === 'flow' ? 'blue' : 'green';
                  this.temporaryLink.path.strokeWidth =
                    SD.itemType === 'flow' ? 5 : 1;
                  go.LinkingTool.prototype.doActivate.call(this);
                },
                // override the link creation process
                'linkingTool.insertLink': function (
                  fromnode,
                  fromport,
                  tonode,
                  toport
                ) {
                  // method override must be function, not =>
                  // to control what kind of Link is created,
                  // change the LinkingTool.archetypeLinkData's category
                  myDiagram.model.setCategoryForLinkData(
                    this.archetypeLinkData,
                    SD.itemType
                  );
                  // Whenever a new Link is drawn by the LinkingTool, it also adds a node data object
                  // that acts as the label node for the link, to allow links to be drawn to/from the link.
                  this.archetypeLabelNodeData =
                    SD.itemType === 'flow' ? { category: 'valve' } : null;
                  // also change the text indicating the condition, which the user can edit
                  this.archetypeLinkData.text = SD.itemType;
                  return go.LinkingTool.prototype.insertLink.call(
                    this,
                    fromnode,
                    fromport,
                    tonode,
                    toport
                  );
                },

                'clickCreatingTool.archetypeNodeData': {}, // enable ClickCreatingTool
                'clickCreatingTool.isDoubleClick': false, // operates on a single click in background
                // but only in "node" creation mode
                'clickCreatingTool.canStart': function () {
                  // method override must be function, not =>
                  return (
                    SD.mode === 'node' &&
                    go.ClickCreatingTool.prototype.canStart.call(this)
                  );
                },
                // customize the data for the new node
                'clickCreatingTool.insertPart': function (loc) {
                  // method override must be function, not =>
                  SD.nodeCounter[SD.itemType] += 1;
                  var newNodeId = SD.itemType + SD.nodeCounter[SD.itemType];
                  this.archetypeNodeData = {
                    key: newNodeId,
                    category: SD.itemType,
                    label: newNodeId,
                  };
                  return go.ClickCreatingTool.prototype.insertPart.call(
                    this,
                    loc
                  );
                },
              });

              // install the NodeLabelDraggingTool as a "mouse move" tool
              myDiagram.toolManager.mouseMoveTools.insertAt(
                0,
                new NodeLabelDraggingTool()
              );

              // when the document is modified, add a "*" to the title and enable the "Save" button
              myDiagram.addDiagramListener('Modified', (e) => {
                var button = document.getElementById('SaveButton');
                if (button) button.disabled = !myDiagram.isModified;
                var idx = document.title.indexOf('*');
                if (myDiagram.isModified) {
                  if (idx < 0) document.title += '*';
                } else {
                  if (idx >= 0) document.title = document.title.slice(0, idx);
                }
              });

              // generate unique label for valve on newly-created flow link
              myDiagram.addDiagramListener('LinkDrawn', (e) => {
                var link = e.subject;
                if (link.category === 'flow') {
                  myDiagram.startTransaction('updateNode');
                  SD.nodeCounter.valve += 1;
                  var newNodeId = 'flow' + SD.nodeCounter.valve;
                  var labelNode = link.labelNodes.first();
                  myDiagram.model.setDataProperty(
                    labelNode.data,
                    'label',
                    newNodeId
                  );
                  myDiagram.commitTransaction('updateNode');
                }
              });

              buildTemplates();

              load();
              setMode('pointer', 'pointer');
            }

            function buildTemplates() {
              // helper functions for the templates
              function nodeStyle(obj) {
                const partial = {
                  type: go.Panel.Spot,
                  layerName: 'Background',
                  locationObjectName: 'SHAPE',
                  selectionObjectName: 'SHAPE',
                  locationSpot: go.Spot.Center,
                };

                if (!obj) return partial;
                Object.entries(partial).forEach(([prop, val]) => {
                  obj[prop] ??= val;
                });

                return obj;
              }

              function shapeStyle(obj) {
                const partial = {
                  name: 'SHAPE',
                  stroke: 'black',
                  fill: '#f0f0f0',
                  portId: '', // So a link can be dragged from the Node: see /GraphObject.html#portId
                  fromLinkable: true,
                  toLinkable: true,
                };
                if (!obj) return partial;
                Object.entries(partial).forEach(([prop, val]) => {
                  if (obj[prop] !== undefined) return; // some properties may intentionally be set to null
                  obj[prop] = val;
                });

                return obj;
              }

              function textStyle(obj) {
                Object.assign(obj, {
                  font: 'bold 11pt helvetica, bold arial, sans-serif',
                  margin: 2,
                  editable: true,
                });
                obj.bindTwoWay('text', 'label');

                return obj;
              }

              // Node templates
              myDiagram.nodeTemplateMap.add(
                'stock',
                new go.Node(nodeStyle())
                  .add(
                    new go.Shape({ desiredSize: new go.Size(50, 30) }).set(
                      shapeStyle()
                    ),
                    textStyle(
                      new go.TextBlock({
                        _isNodeLabel: true, // declare draggable by NodeLabelDraggingTool
                        alignment: new go.Spot(0.5, 0.5, 0, 30), // initial value
                      }).bindTwoWay(
                        'alignment',
                        'label_offset',
                        go.Spot.parse,
                        go.Spot.stringify
                      )
                    )
                  )
                  .bindTwoWay(
                    'location',
                    'loc',
                    go.Point.parse,
                    go.Point.stringify
                  )
              );

              myDiagram.nodeTemplateMap.add(
                'cloud',
                new go.Node(nodeStyle())
                  .bindTwoWay(
                    'location',
                    'loc',
                    go.Point.parse,
                    go.Point.stringify
                  )
                  .add(
                    new go.Shape(shapeStyle(), {
                      figure: 'Cloud',
                      desiredSize: new go.Size(35, 35),
                    })
                  )
              );

              myDiagram.nodeTemplateMap.add(
                'valve',
                new go.Node(
                  nodeStyle({
                    movable: false,
                    layerName: 'Foreground',
                    alignmentFocus: go.Spot.None,
                  })
                )
                  .bindTwoWay(
                    'location',
                    'loc',
                    go.Point.parse,
                    go.Point.stringify
                  )
                  .add(
                    new go.Shape({
                      figure: 'Ellipse',
                      desiredSize: new go.Size(20, 20),
                    }).set(shapeStyle()),
                    textStyle(
                      new go.TextBlock({
                        _isNodeLabel: true, // declare draggable by NodeLabelDraggingTool
                        alignment: new go.Spot(0.5, 0.5, 0, 20), // initial value
                      }).bindTwoWay(
                        'alignment',
                        'label_offset',
                        go.Spot.parse,
                        go.Spot.stringify
                      )
                    )
                  )
              );

              myDiagram.nodeTemplateMap.add(
                'variable',
                new go.Node(nodeStyle({ type: go.Panel.Spot })) // Spot para ubicar libremente
                  .bindTwoWay(
                    'location',
                    'loc',
                    go.Point.parse,
                    go.Point.stringify
                  )
                  .add(
                    new go.Shape({
                      figure: 'Ellipse',
                      desiredSize: new go.Size(20, 20),
                    }).set(shapeStyle()),
                    textStyle(
                      new go.TextBlock({
                        _isNodeLabel: true, // necesario para que sea draggable
                        editable: true, // por si querés editar también
                        alignment: new go.Spot(0.5, 0.5, 0, 25), // desplazado hacia abajo
                      })
                    ).bindTwoWay(
                      'alignment',
                      'label_offset',
                      go.Spot.parse,
                      go.Spot.stringify
                    )
                  )
              );

              // Link templates
              myDiagram.linkTemplateMap.add(
                'flow',
                new go.Link({ toShortLength: 8 }).add(
                  new go.Shape({ stroke: 'blue', strokeWidth: 5 }),
                  new go.Shape({
                    fill: 'blue',
                    stroke: null,
                    toArrow: 'Standard',
                    scale: 2.5,
                  })
                )
              );

              myDiagram.linkTemplateMap.add(
                'influence',
                new go.Link({
                  curve: go.Curve.Bezier,
                  toShortLength: 10,
                  curviness: 50,
                }).add(
                  new go.Shape({ stroke: 'green', strokeWidth: 1.5 }),
                  new go.Shape({
                    fill: 'green',
                    stroke: null,
                    toArrow: 'Standard',
                    scale: 1.5,
                  })
                )
              );
            }

            function setMode(mode, itemType) {
              myDiagram.startTransaction();
              document.getElementById(SD.itemType + '_button').style.filter =
                'brightness(100%)';
              document.getElementById(itemType + '_button').style.filter =
                'brightness(180%)';
              SD.mode = mode;
              SD.itemType = itemType;
              if (mode === 'pointer') {
                myDiagram.allowLink = false;
                myDiagram.nodes.each((n) => (n.port.cursor = ''));
              } else if (mode === 'node') {
                myDiagram.allowLink = false;
                myDiagram.nodes.each((n) => (n.port.cursor = ''));
              } else if (mode === 'link') {
                myDiagram.allowLink = true;
                myDiagram.nodes.each((n) => (n.port.cursor = 'pointer'));
              }
              myDiagram.commitTransaction('mode changed');
            }

            // Show the diagram's model in JSON format that the user may edit
            function load() {
              myDiagram.model = go.Model.fromJson(
                `{ "class": "go.GraphLinksModel",
  "linkLabelKeysProperty": "labelKeys",
  "nodeDataArray": [
  ],
  "linkDataArray": [
  ]
}`
              );
            }
            window.addEventListener('DOMContentLoaded', init);
          </script>

          <div id='sample'>
            <div class='flex flex-row flex-wrap'>
              <div class='menu-container'>
                <div class='menu-section'>
                  <div class='menu-group'>
                    <button
                      id='pointer_button'
                      onclick="setMode('pointer','pointer');">Pointer</button
                    >
                  </div>

                  <div class='menu-group'>
                    <button id='stock_button' onclick="setMode('node','stock');"
                      >Stock</button
                    >
                    <button id='cloud_button' onclick="setMode('node','cloud');"
                      >Cloud</button
                    >
                    <button
                      id='variable_button'
                      onclick="setMode('node','variable');">Variable</button
                    >
                  </div>

                  <div class='menu-group'>
                    <button id='flow_button' onclick="setMode('link','flow');"
                      >Flow</button
                    >
                    <button
                      id='influence_button'
                      onclick="setMode('link','influence');">Influence</button
                    >
                  </div>
                </div>
              </div>
              <div
                id='myDiagramDiv'
                class='mb-2 mr-2 min-w-[400px]'
                style='width: 100%; height: 400px; border: solid 1px black'
              >
              </div>
              <div
                class='mb-2 h-fit w-fit flex-none rounded-md border-x border-t border-black'
                style='background-color: rgb(31, 73, 99)'
              >
                <div
                  class='rounded-b-md border-b border-black'
                  style='background-color: white; height: 0.5rem'
                >
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>
